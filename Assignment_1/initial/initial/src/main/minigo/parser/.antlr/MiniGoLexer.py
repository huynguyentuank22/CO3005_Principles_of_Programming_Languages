# Generated from c:/Users/Huy/Documents/Tuan_Huy/CO3005_PPL/Assignment_1/initial/initial/src/main/minigo/parser/MiniGo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


# Nguyen Tuan Huy - 2211253
# fix nh∆∞ tam, sua expression
from lexererr import *


def serializedATN():
    return [
        4,0,69,536,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
        78,7,78,1,0,1,0,1,1,1,1,1,2,1,2,3,2,166,8,2,1,3,1,3,1,4,1,4,1,4,
        1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
        1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,
        1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,
        1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,
        1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,
        1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,32,
        1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,
        1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,
        1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,
        1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,
        1,54,1,54,1,54,3,54,363,8,54,1,55,1,55,5,55,367,8,55,10,55,12,55,
        370,9,55,1,55,3,55,373,8,55,1,56,1,56,1,56,4,56,378,8,56,11,56,12,
        56,379,1,57,1,57,1,57,4,57,385,8,57,11,57,12,57,386,1,58,1,58,1,
        58,4,58,392,8,58,11,58,12,58,393,1,59,1,59,1,60,1,60,1,61,1,61,1,
        62,1,62,1,62,1,62,1,62,3,62,407,8,62,1,62,1,62,3,62,411,8,62,1,63,
        4,63,414,8,63,11,63,12,63,415,1,64,1,64,5,64,420,8,64,10,64,12,64,
        423,9,64,1,65,1,65,3,65,427,8,65,1,65,4,65,430,8,65,11,65,12,65,
        431,1,66,1,66,5,66,436,8,66,10,66,12,66,439,9,66,1,66,1,66,1,67,
        1,67,3,67,445,8,67,1,68,1,68,1,68,1,69,1,69,1,69,1,70,1,70,3,70,
        455,8,70,1,70,1,70,1,70,5,70,460,8,70,10,70,12,70,463,9,70,1,71,
        1,71,1,72,1,72,1,72,1,72,5,72,471,8,72,10,72,12,72,474,9,72,1,72,
        1,72,1,73,1,73,1,73,1,73,1,73,5,73,483,8,73,10,73,12,73,486,9,73,
        1,73,1,73,1,73,1,73,1,73,1,74,4,74,494,8,74,11,74,12,74,495,1,74,
        1,74,1,75,4,75,501,8,75,11,75,12,75,502,1,75,1,75,1,76,1,76,1,76,
        1,77,1,77,5,77,512,8,77,10,77,12,77,515,9,77,1,77,1,77,1,77,1,78,
        1,78,5,78,522,8,78,10,78,12,78,525,9,78,1,78,4,78,528,8,78,11,78,
        12,78,529,1,78,3,78,533,8,78,1,78,1,78,1,484,0,79,1,1,3,2,5,3,7,
        4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
        16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,
        27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,
        38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,
        49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,
        117,59,119,0,121,0,123,0,125,60,127,0,129,0,131,0,133,61,135,0,137,
        0,139,0,141,62,143,0,145,63,147,64,149,65,151,66,153,67,155,68,157,
        69,1,0,15,2,0,66,66,98,98,1,0,48,49,2,0,79,79,111,111,1,0,48,55,
        2,0,88,88,120,120,3,0,48,57,65,70,97,102,1,0,48,57,1,0,49,57,2,0,
        65,90,97,122,2,0,69,69,101,101,2,0,43,43,45,45,4,0,10,10,13,13,34,
        34,92,92,5,0,34,34,92,92,110,110,114,114,116,116,2,0,10,10,13,13,
        3,0,9,9,12,13,32,32,555,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
        1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,
        1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,
        1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,
        107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,
        0,0,0,117,1,0,0,0,0,125,1,0,0,0,0,133,1,0,0,0,0,141,1,0,0,0,0,145,
        1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,
        0,155,1,0,0,0,0,157,1,0,0,0,1,159,1,0,0,0,3,161,1,0,0,0,5,165,1,
        0,0,0,7,167,1,0,0,0,9,169,1,0,0,0,11,172,1,0,0,0,13,177,1,0,0,0,
        15,181,1,0,0,0,17,188,1,0,0,0,19,193,1,0,0,0,21,198,1,0,0,0,23,205,
        1,0,0,0,25,215,1,0,0,0,27,222,1,0,0,0,29,226,1,0,0,0,31,232,1,0,
        0,0,33,240,1,0,0,0,35,246,1,0,0,0,37,250,1,0,0,0,39,259,1,0,0,0,
        41,265,1,0,0,0,43,271,1,0,0,0,45,275,1,0,0,0,47,280,1,0,0,0,49,286,
        1,0,0,0,51,288,1,0,0,0,53,290,1,0,0,0,55,292,1,0,0,0,57,294,1,0,
        0,0,59,296,1,0,0,0,61,299,1,0,0,0,63,302,1,0,0,0,65,304,1,0,0,0,
        67,307,1,0,0,0,69,309,1,0,0,0,71,312,1,0,0,0,73,315,1,0,0,0,75,318,
        1,0,0,0,77,320,1,0,0,0,79,322,1,0,0,0,81,325,1,0,0,0,83,328,1,0,
        0,0,85,331,1,0,0,0,87,334,1,0,0,0,89,337,1,0,0,0,91,340,1,0,0,0,
        93,342,1,0,0,0,95,344,1,0,0,0,97,346,1,0,0,0,99,348,1,0,0,0,101,
        350,1,0,0,0,103,352,1,0,0,0,105,354,1,0,0,0,107,356,1,0,0,0,109,
        362,1,0,0,0,111,372,1,0,0,0,113,374,1,0,0,0,115,381,1,0,0,0,117,
        388,1,0,0,0,119,395,1,0,0,0,121,397,1,0,0,0,123,399,1,0,0,0,125,
        410,1,0,0,0,127,413,1,0,0,0,129,417,1,0,0,0,131,424,1,0,0,0,133,
        433,1,0,0,0,135,444,1,0,0,0,137,446,1,0,0,0,139,449,1,0,0,0,141,
        454,1,0,0,0,143,464,1,0,0,0,145,466,1,0,0,0,147,477,1,0,0,0,149,
        493,1,0,0,0,151,500,1,0,0,0,153,506,1,0,0,0,155,509,1,0,0,0,157,
        519,1,0,0,0,159,160,5,58,0,0,160,2,1,0,0,0,161,162,5,95,0,0,162,
        4,1,0,0,0,163,166,3,45,22,0,164,166,3,47,23,0,165,163,1,0,0,0,165,
        164,1,0,0,0,166,6,1,0,0,0,167,168,3,43,21,0,168,8,1,0,0,0,169,170,
        5,105,0,0,170,171,5,102,0,0,171,10,1,0,0,0,172,173,5,101,0,0,173,
        174,5,108,0,0,174,175,5,115,0,0,175,176,5,101,0,0,176,12,1,0,0,0,
        177,178,5,102,0,0,178,179,5,111,0,0,179,180,5,114,0,0,180,14,1,0,
        0,0,181,182,5,114,0,0,182,183,5,101,0,0,183,184,5,116,0,0,184,185,
        5,117,0,0,185,186,5,114,0,0,186,187,5,110,0,0,187,16,1,0,0,0,188,
        189,5,102,0,0,189,190,5,117,0,0,190,191,5,110,0,0,191,192,5,99,0,
        0,192,18,1,0,0,0,193,194,5,116,0,0,194,195,5,121,0,0,195,196,5,112,
        0,0,196,197,5,101,0,0,197,20,1,0,0,0,198,199,5,115,0,0,199,200,5,
        116,0,0,200,201,5,114,0,0,201,202,5,117,0,0,202,203,5,99,0,0,203,
        204,5,116,0,0,204,22,1,0,0,0,205,206,5,105,0,0,206,207,5,110,0,0,
        207,208,5,116,0,0,208,209,5,101,0,0,209,210,5,114,0,0,210,211,5,
        102,0,0,211,212,5,97,0,0,212,213,5,99,0,0,213,214,5,101,0,0,214,
        24,1,0,0,0,215,216,5,115,0,0,216,217,5,116,0,0,217,218,5,114,0,0,
        218,219,5,105,0,0,219,220,5,110,0,0,220,221,5,103,0,0,221,26,1,0,
        0,0,222,223,5,105,0,0,223,224,5,110,0,0,224,225,5,116,0,0,225,28,
        1,0,0,0,226,227,5,102,0,0,227,228,5,108,0,0,228,229,5,111,0,0,229,
        230,5,97,0,0,230,231,5,116,0,0,231,30,1,0,0,0,232,233,5,98,0,0,233,
        234,5,111,0,0,234,235,5,111,0,0,235,236,5,108,0,0,236,237,5,101,
        0,0,237,238,5,97,0,0,238,239,5,110,0,0,239,32,1,0,0,0,240,241,5,
        99,0,0,241,242,5,111,0,0,242,243,5,110,0,0,243,244,5,115,0,0,244,
        245,5,116,0,0,245,34,1,0,0,0,246,247,5,118,0,0,247,248,5,97,0,0,
        248,249,5,114,0,0,249,36,1,0,0,0,250,251,5,99,0,0,251,252,5,111,
        0,0,252,253,5,110,0,0,253,254,5,116,0,0,254,255,5,105,0,0,255,256,
        5,110,0,0,256,257,5,117,0,0,257,258,5,101,0,0,258,38,1,0,0,0,259,
        260,5,98,0,0,260,261,5,114,0,0,261,262,5,101,0,0,262,263,5,97,0,
        0,263,264,5,107,0,0,264,40,1,0,0,0,265,266,5,114,0,0,266,267,5,97,
        0,0,267,268,5,110,0,0,268,269,5,103,0,0,269,270,5,101,0,0,270,42,
        1,0,0,0,271,272,5,110,0,0,272,273,5,105,0,0,273,274,5,108,0,0,274,
        44,1,0,0,0,275,276,5,116,0,0,276,277,5,114,0,0,277,278,5,117,0,0,
        278,279,5,101,0,0,279,46,1,0,0,0,280,281,5,102,0,0,281,282,5,97,
        0,0,282,283,5,108,0,0,283,284,5,115,0,0,284,285,5,101,0,0,285,48,
        1,0,0,0,286,287,5,43,0,0,287,50,1,0,0,0,288,289,5,45,0,0,289,52,
        1,0,0,0,290,291,5,42,0,0,291,54,1,0,0,0,292,293,5,47,0,0,293,56,
        1,0,0,0,294,295,5,37,0,0,295,58,1,0,0,0,296,297,5,61,0,0,297,298,
        5,61,0,0,298,60,1,0,0,0,299,300,5,33,0,0,300,301,5,61,0,0,301,62,
        1,0,0,0,302,303,5,60,0,0,303,64,1,0,0,0,304,305,5,60,0,0,305,306,
        5,61,0,0,306,66,1,0,0,0,307,308,5,62,0,0,308,68,1,0,0,0,309,310,
        5,62,0,0,310,311,5,61,0,0,311,70,1,0,0,0,312,313,5,38,0,0,313,314,
        5,38,0,0,314,72,1,0,0,0,315,316,5,124,0,0,316,317,5,124,0,0,317,
        74,1,0,0,0,318,319,5,33,0,0,319,76,1,0,0,0,320,321,5,61,0,0,321,
        78,1,0,0,0,322,323,5,58,0,0,323,324,5,61,0,0,324,80,1,0,0,0,325,
        326,5,43,0,0,326,327,5,61,0,0,327,82,1,0,0,0,328,329,5,45,0,0,329,
        330,5,61,0,0,330,84,1,0,0,0,331,332,5,42,0,0,332,333,5,61,0,0,333,
        86,1,0,0,0,334,335,5,47,0,0,335,336,5,61,0,0,336,88,1,0,0,0,337,
        338,5,37,0,0,338,339,5,61,0,0,339,90,1,0,0,0,340,341,5,46,0,0,341,
        92,1,0,0,0,342,343,5,40,0,0,343,94,1,0,0,0,344,345,5,41,0,0,345,
        96,1,0,0,0,346,347,5,123,0,0,347,98,1,0,0,0,348,349,5,125,0,0,349,
        100,1,0,0,0,350,351,5,91,0,0,351,102,1,0,0,0,352,353,5,93,0,0,353,
        104,1,0,0,0,354,355,5,44,0,0,355,106,1,0,0,0,356,357,5,59,0,0,357,
        108,1,0,0,0,358,363,3,111,55,0,359,363,3,113,56,0,360,363,3,115,
        57,0,361,363,3,117,58,0,362,358,1,0,0,0,362,359,1,0,0,0,362,360,
        1,0,0,0,362,361,1,0,0,0,363,110,1,0,0,0,364,368,3,121,60,0,365,367,
        3,119,59,0,366,365,1,0,0,0,367,370,1,0,0,0,368,366,1,0,0,0,368,369,
        1,0,0,0,369,373,1,0,0,0,370,368,1,0,0,0,371,373,5,48,0,0,372,364,
        1,0,0,0,372,371,1,0,0,0,373,112,1,0,0,0,374,375,5,48,0,0,375,377,
        7,0,0,0,376,378,7,1,0,0,377,376,1,0,0,0,378,379,1,0,0,0,379,377,
        1,0,0,0,379,380,1,0,0,0,380,114,1,0,0,0,381,382,5,48,0,0,382,384,
        7,2,0,0,383,385,7,3,0,0,384,383,1,0,0,0,385,386,1,0,0,0,386,384,
        1,0,0,0,386,387,1,0,0,0,387,116,1,0,0,0,388,389,5,48,0,0,389,391,
        7,4,0,0,390,392,7,5,0,0,391,390,1,0,0,0,392,393,1,0,0,0,393,391,
        1,0,0,0,393,394,1,0,0,0,394,118,1,0,0,0,395,396,7,6,0,0,396,120,
        1,0,0,0,397,398,7,7,0,0,398,122,1,0,0,0,399,400,7,8,0,0,400,124,
        1,0,0,0,401,402,3,127,63,0,402,403,3,129,64,0,403,411,1,0,0,0,404,
        406,3,127,63,0,405,407,3,129,64,0,406,405,1,0,0,0,406,407,1,0,0,
        0,407,408,1,0,0,0,408,409,3,131,65,0,409,411,1,0,0,0,410,401,1,0,
        0,0,410,404,1,0,0,0,411,126,1,0,0,0,412,414,3,119,59,0,413,412,1,
        0,0,0,414,415,1,0,0,0,415,413,1,0,0,0,415,416,1,0,0,0,416,128,1,
        0,0,0,417,421,5,46,0,0,418,420,3,119,59,0,419,418,1,0,0,0,420,423,
        1,0,0,0,421,419,1,0,0,0,421,422,1,0,0,0,422,130,1,0,0,0,423,421,
        1,0,0,0,424,426,7,9,0,0,425,427,7,10,0,0,426,425,1,0,0,0,426,427,
        1,0,0,0,427,429,1,0,0,0,428,430,3,119,59,0,429,428,1,0,0,0,430,431,
        1,0,0,0,431,429,1,0,0,0,431,432,1,0,0,0,432,132,1,0,0,0,433,437,
        5,34,0,0,434,436,3,135,67,0,435,434,1,0,0,0,436,439,1,0,0,0,437,
        435,1,0,0,0,437,438,1,0,0,0,438,440,1,0,0,0,439,437,1,0,0,0,440,
        441,5,34,0,0,441,134,1,0,0,0,442,445,3,137,68,0,443,445,8,11,0,0,
        444,442,1,0,0,0,444,443,1,0,0,0,445,136,1,0,0,0,446,447,5,92,0,0,
        447,448,7,12,0,0,448,138,1,0,0,0,449,450,5,92,0,0,450,451,8,12,0,
        0,451,140,1,0,0,0,452,455,3,123,61,0,453,455,3,143,71,0,454,452,
        1,0,0,0,454,453,1,0,0,0,455,461,1,0,0,0,456,460,3,123,61,0,457,460,
        3,143,71,0,458,460,3,119,59,0,459,456,1,0,0,0,459,457,1,0,0,0,459,
        458,1,0,0,0,460,463,1,0,0,0,461,459,1,0,0,0,461,462,1,0,0,0,462,
        142,1,0,0,0,463,461,1,0,0,0,464,465,5,95,0,0,465,144,1,0,0,0,466,
        467,5,47,0,0,467,468,5,47,0,0,468,472,1,0,0,0,469,471,8,13,0,0,470,
        469,1,0,0,0,471,474,1,0,0,0,472,470,1,0,0,0,472,473,1,0,0,0,473,
        475,1,0,0,0,474,472,1,0,0,0,475,476,6,72,0,0,476,146,1,0,0,0,477,
        478,5,47,0,0,478,479,5,42,0,0,479,484,1,0,0,0,480,483,3,147,73,0,
        481,483,9,0,0,0,482,480,1,0,0,0,482,481,1,0,0,0,483,486,1,0,0,0,
        484,485,1,0,0,0,484,482,1,0,0,0,485,487,1,0,0,0,486,484,1,0,0,0,
        487,488,5,42,0,0,488,489,5,47,0,0,489,490,1,0,0,0,490,491,6,73,0,
        0,491,148,1,0,0,0,492,494,7,14,0,0,493,492,1,0,0,0,494,495,1,0,0,
        0,495,493,1,0,0,0,495,496,1,0,0,0,496,497,1,0,0,0,497,498,6,74,0,
        0,498,150,1,0,0,0,499,501,7,13,0,0,500,499,1,0,0,0,501,502,1,0,0,
        0,502,500,1,0,0,0,502,503,1,0,0,0,503,504,1,0,0,0,504,505,6,75,1,
        0,505,152,1,0,0,0,506,507,9,0,0,0,507,508,6,76,2,0,508,154,1,0,0,
        0,509,513,5,34,0,0,510,512,3,135,67,0,511,510,1,0,0,0,512,515,1,
        0,0,0,513,511,1,0,0,0,513,514,1,0,0,0,514,516,1,0,0,0,515,513,1,
        0,0,0,516,517,3,139,69,0,517,518,6,77,3,0,518,156,1,0,0,0,519,523,
        5,34,0,0,520,522,3,135,67,0,521,520,1,0,0,0,522,525,1,0,0,0,523,
        521,1,0,0,0,523,524,1,0,0,0,524,532,1,0,0,0,525,523,1,0,0,0,526,
        528,7,13,0,0,527,526,1,0,0,0,528,529,1,0,0,0,529,527,1,0,0,0,529,
        530,1,0,0,0,530,533,1,0,0,0,531,533,5,0,0,1,532,527,1,0,0,0,532,
        531,1,0,0,0,533,534,1,0,0,0,534,535,6,78,4,0,535,158,1,0,0,0,28,
        0,165,362,368,372,379,386,393,406,410,415,421,426,431,437,444,454,
        459,461,472,482,484,495,502,513,523,529,532,5,6,0,0,1,75,0,1,76,
        1,1,77,2,1,78,3
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    BOOLEAN_LITERAL = 3
    NIL_LITERAL = 4
    IF = 5
    ELSE = 6
    FOR = 7
    RETURN = 8
    FUNC = 9
    TYPE = 10
    STRUCT = 11
    INTERFACE = 12
    STRING = 13
    INT = 14
    FLOAT = 15
    BOOLEAN = 16
    CONST = 17
    VAR = 18
    CONTINUE = 19
    BREAK = 20
    RANGE = 21
    NIL = 22
    TRUE = 23
    FALSE = 24
    ADD = 25
    SUB = 26
    MUL = 27
    DIV = 28
    MOD = 29
    EQ = 30
    NEQ = 31
    LT = 32
    LE = 33
    GT = 34
    GE = 35
    AND = 36
    OR = 37
    NOT = 38
    ASSIGN = 39
    DECLARE_ASSIGN = 40
    PLUS_ASSIGN = 41
    MINUS_ASSIGN = 42
    MULT_ASSIGN = 43
    DIV_ASSIGN = 44
    MOD_ASSIGN = 45
    DOT = 46
    LB = 47
    RB = 48
    LCB = 49
    RCB = 50
    LSB = 51
    RSB = 52
    COMMA = 53
    SEMICOLON = 54
    INT_LITERAL = 55
    DECIMAL_LITERAL = 56
    BINARY_LITERAL = 57
    OCTAL_LITERAL = 58
    HEX_LITERAL = 59
    FLOAT_LITERAL = 60
    STRING_LITERAL = 61
    IDENTIFIER = 62
    LINE_COMMENT = 63
    COMMENT = 64
    WS = 65
    EOS = 66
    ERROR_CHAR = 67
    ILLEGAL_ESCAPE = 68
    UNCLOSE_STRING = 69

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "':'", "'_'", "'if'", "'else'", "'for'", "'return'", "'func'", 
            "'type'", "'struct'", "'interface'", "'string'", "'int'", "'float'", 
            "'boolean'", "'const'", "'var'", "'continue'", "'break'", "'range'", 
            "'nil'", "'true'", "'false'", "'+'", "'-'", "'*'", "'/'", "'%'", 
            "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", 
            "'!'", "'='", "':='", "'+='", "'-='", "'*='", "'/='", "'%='", 
            "'.'", "'('", "')'", "'{'", "'}'", "'['", "']'", "','", "';'" ]

    symbolicNames = [ "<INVALID>",
            "BOOLEAN_LITERAL", "NIL_LITERAL", "IF", "ELSE", "FOR", "RETURN", 
            "FUNC", "TYPE", "STRUCT", "INTERFACE", "STRING", "INT", "FLOAT", 
            "BOOLEAN", "CONST", "VAR", "CONTINUE", "BREAK", "RANGE", "NIL", 
            "TRUE", "FALSE", "ADD", "SUB", "MUL", "DIV", "MOD", "EQ", "NEQ", 
            "LT", "LE", "GT", "GE", "AND", "OR", "NOT", "ASSIGN", "DECLARE_ASSIGN", 
            "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", 
            "MOD_ASSIGN", "DOT", "LB", "RB", "LCB", "RCB", "LSB", "RSB", 
            "COMMA", "SEMICOLON", "INT_LITERAL", "DECIMAL_LITERAL", "BINARY_LITERAL", 
            "OCTAL_LITERAL", "HEX_LITERAL", "FLOAT_LITERAL", "STRING_LITERAL", 
            "IDENTIFIER", "LINE_COMMENT", "COMMENT", "WS", "EOS", "ERROR_CHAR", 
            "ILLEGAL_ESCAPE", "UNCLOSE_STRING" ]

    ruleNames = [ "T__0", "T__1", "BOOLEAN_LITERAL", "NIL_LITERAL", "IF", 
                  "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", "INTERFACE", 
                  "STRING", "INT", "FLOAT", "BOOLEAN", "CONST", "VAR", "CONTINUE", 
                  "BREAK", "RANGE", "NIL", "TRUE", "FALSE", "ADD", "SUB", 
                  "MUL", "DIV", "MOD", "EQ", "NEQ", "LT", "LE", "GT", "GE", 
                  "AND", "OR", "NOT", "ASSIGN", "DECLARE_ASSIGN", "PLUS_ASSIGN", 
                  "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
                  "DOT", "LB", "RB", "LCB", "RCB", "LSB", "RSB", "COMMA", 
                  "SEMICOLON", "INT_LITERAL", "DECIMAL_LITERAL", "BINARY_LITERAL", 
                  "OCTAL_LITERAL", "HEX_LITERAL", "DIGIT", "NONZERO_DIGIT", 
                  "LETTER", "FLOAT_LITERAL", "INT_PART", "DEC_PART", "EXP_PART", 
                  "STRING_LITERAL", "CHAR", "ESC", "INVALID_ESC", "IDENTIFIER", 
                  "UNDERSCORE", "LINE_COMMENT", "COMMENT", "WS", "EOS", 
                  "ERROR_CHAR", "ILLEGAL_ESCAPE", "UNCLOSE_STRING" ]

    grammarFileName = "MiniGo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def __init__(self, input):
        super().__init__(input)
        self.checkVersion("4.9.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None
        self.prev_token = None

    def check_EOS(self):
        if not self.prev_token:
            return False
        tokens = [
            self.IDENTIFIER,
            self.INT_LITERAL, self.FLOAT_LITERAL, self.STRING_LITERAL, self.BOOLEAN_LITERAL, self.NIL_LITERAL,
            self.INT, self.FLOAT, self.STRING, self.BOOLEAN,
            self.RETURN, self.BREAK, self.CONTINUE,
            self.RB, self.RCB, self.RSB
        ]
        return self.prev_token.type in tokens

    def emit(self):
        tk = self.type
        token = super().emit()
        if tk == self.UNCLOSE_STRING:       
            result = super().emit();
            raise UncloseString(result.text);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            raise IllegalEscape(result.text);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            raise ErrorToken(result.text); 
        elif tk != '\n':
            self.prev_token = token
        return token


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[75] = self.EOS_action 
            actions[76] = self.ERROR_CHAR_action 
            actions[77] = self.ILLEGAL_ESCAPE_action 
            actions[78] = self.UNCLOSE_STRING_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def EOS_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:

                if self.check_EOS():
                    self.text = ';'
                else:
                    self.skip()

     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            raise ErrorToken(self.text)
     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
             
                raise IllegalEscape(self.text)
                
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:

                ESC = ['\r', '\n']
                text = str(self.text)
                while text[-1] in ESC:
                    text = text[:-1]
                raise UncloseString(text[:])

     


