import unittest
from TestUtils import TestChecker
from AST import *

class CheckSuite(unittest.TestCase):
    def test_var_redeclared(self):
        input = """var a int; var b int; var a int; """
        expect = "Redeclared Variable: a\n"
        self.assertTrue(TestChecker.test(input,expect,400))

    def test_const_redeclared(self):
        input = """const a = 1; const b = 2; const a = 3;"""
        expect = "Redeclared Constant: a\n"
        self.assertTrue(TestChecker.test(input,expect,401))

    def test_func_redeclared(self):
        input = """
        func foo() {
            return
        } 
        func foo() {
            return
        }
        """
        expect = "Redeclared Function: foo\n"
        self.assertTrue(TestChecker.test(input,expect,402))

    def test_mixed_redeclared(self):
        input = """var a int; const a = 1;"""
        expect = "Redeclared Constant: a\n"
        self.assertTrue(TestChecker.test(input,expect,403))

    def test_undeclared_identifier(self):
        input = "var a = b;"
        expect = "Undeclared Identifier: b\n"
        self.assertTrue(TestChecker.test(input,expect,404))

    def test_type_mismatch_int_with_float(self):
        input = """var a int = 1.2;"""
        expect = "Type Mismatch: VarDecl(a,IntType,FloatLiteral(1.2))\n"
        self.assertTrue(TestChecker.test(input,expect,405))
    
    def test_type_missmatch_int_with_string(self):
        input = """var a int = "huy";"""
        expect = """Type Mismatch: VarDecl(a,IntType,StringLiteral("huy"))\n"""
        self.assertTrue(TestChecker.test(input,expect,406))

    def test_type_missmatch_int_with_bool(self):
        input = """var a int = true;"""
        expect = "Type Mismatch: VarDecl(a,IntType,BooleanLiteral(true))\n"
        self.assertTrue(TestChecker.test(input,expect,407))

    def test_type_missmatch_float_with_int(self):
        input = """var a float = 1;"""
        expect = "Type Mismatch: VarDecl(a,FloatType,IntLiteral(1))\n"
        self.assertTrue(TestChecker.test(input,expect,408))

    def test_type_missmatch_float_with_string(self):
        input = """var a float = "huy";"""
        expect = "Type Mismatch: VarDecl(a,FloatType,StringLiteral(\"huy\"))\n"
        self.assertTrue(TestChecker.test(input,expect,409))

    def test_type_missmatch_float_with_bool(self):
        input = """var a float = false;"""
        expect = "Type Mismatch: VarDecl(a,FloatType,BooleanLiteral(false))\n"
        self.assertTrue(TestChecker.test(input,expect,410))